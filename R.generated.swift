//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle

  let reuseIdentifier = reuseIdentifier()

  var image: image { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.image` struct is generated, and contains static references to 19 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `icClear`.
    var icClear: RswiftResources.ImageResource { .init(name: "icClear", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icCloudy`.
    var icCloudy: RswiftResources.ImageResource { .init(name: "icCloudy", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icFogCopy`.
    var icFogCopy: RswiftResources.ImageResource { .init(name: "icFogCopy", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icLightClouds`.
    var icLightClouds: RswiftResources.ImageResource { .init(name: "icLightClouds", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icLightRain`.
    var icLightRain: RswiftResources.ImageResource { .init(name: "icLightRain", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icMapPin`.
    var icMapPin: RswiftResources.ImageResource { .init(name: "icMapPin", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icNotification`.
    var icNotification: RswiftResources.ImageResource { .init(name: "icNotification", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icRain`.
    var icRain: RswiftResources.ImageResource { .init(name: "icRain", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icSnow`.
    var icSnow: RswiftResources.ImageResource { .init(name: "icSnow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icStorm`.
    var icStorm: RswiftResources.ImageResource { .init(name: "icStorm", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icThermometer`.
    var icThermometer: RswiftResources.ImageResource { .init(name: "icThermometer", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_arrow_left`.
    var ic_arrow_left: RswiftResources.ImageResource { .init(name: "ic_arrow_left", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_arrow_right`.
    var ic_arrow_right: RswiftResources.ImageResource { .init(name: "ic_arrow_right", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_humidity`.
    var ic_humidity: RswiftResources.ImageResource { .init(name: "ic_humidity", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_logo`.
    var ic_logo: RswiftResources.ImageResource { .init(name: "ic_logo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_pressure`.
    var ic_pressure: RswiftResources.ImageResource { .init(name: "ic_pressure", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_settings`.
    var ic_settings: RswiftResources.ImageResource { .init(name: "ic_settings", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_uv_index`.
    var ic_uv_index: RswiftResources.ImageResource { .init(name: "ic_uv_index", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_visibility`.
    var ic_visibility: RswiftResources.ImageResource { .init(name: "ic_visibility", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.file` struct is generated, and contains static references to 1 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `Config.xcconfig`.
    var configXcconfig: RswiftResources.FileResource { .init(name: "Config", pathExtension: "xcconfig", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `ForcastPagerViewCell`.
    var forcastPagerViewCell: RswiftResources.NibReferenceReuseIdentifier<ForcastPagerViewCell, ForcastPagerViewCell> { .init(name: "ForcastPagerViewCell", bundle: bundle, identifier: "ForcastPagerViewCell") }

    func validate() throws {
      if UIKit.UIImage(named: "ic_logo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_logo' is used in nib 'ForcastPagerViewCell', but couldn't be loaded.") }
    }
  }

  /// This `_R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {

    /// Reuse identifier `DailyItemViewCell`.
    let dailyItemViewCell: RswiftResources.ReuseIdentifier<DailyItemViewCell> = .init(identifier: "DailyItemViewCell")

    /// Reuse identifier `ForcastPagerViewCell`.
    let forcastPagerViewCell: RswiftResources.ReuseIdentifier<ForcastPagerViewCell> = .init(identifier: "ForcastPagerViewCell")
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var main: main { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func main(bundle: Foundation.Bundle) -> main {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
      try self.main.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {
        if UIKit.UIImage(named: "ic_logo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
    }

    /// Storyboard `Main`.
    struct main: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UINavigationController

      let bundle: Foundation.Bundle

      let name = "Main"

      var detailViewController: RswiftResources.StoryboardViewControllerIdentifier<DetailViewController> { .init(identifier: "DetailViewController", storyboard: name, bundle: bundle) }
      var homeViewController: RswiftResources.StoryboardViewControllerIdentifier<HomeViewController> { .init(identifier: "HomeViewController", storyboard: name, bundle: bundle) }
      var settingsViewController: RswiftResources.StoryboardViewControllerIdentifier<SettingsViewController> { .init(identifier: "SettingsViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "icMapPin", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icMapPin' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icNotification", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icNotification' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icThermometer", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icThermometer' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_arrow_left", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_arrow_left' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_arrow_right", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_arrow_right' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_humidity", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_humidity' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_logo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_logo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_pressure", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_pressure' is used in storyboard 'Main', but couldn't be loaded.") }
        if detailViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'detailViewController' could not be loaded from storyboard 'Main' as 'DetailViewController'.") }
        if homeViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'homeViewController' could not be loaded from storyboard 'Main' as 'HomeViewController'.") }
        if settingsViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'settingsViewController' could not be loaded from storyboard 'Main' as 'SettingsViewController'.") }
      }
    }
  }
}